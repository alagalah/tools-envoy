#!/bin/bash

# Run a single Bazel test target under gdb. Usage:
#
# tools/bazel-test-gdb //test/foo:bar --some_other --bazel_args
#
# The default build type ("fastbuild") does not generate debugging symbols so
# you almost certainly want to use "-c opt" or "-c dbg" Bazel arguments to
# trigger generation of debug symbols.  By default the "opt" build type does not
# include symbols for tests: see bazel/envoy_build_system.bzl for details.

if [[ ! "$3" =~ (@[a-zA-Z0-9_-]+)?//.*:[a-zA-Z0-9_-]+ ]]
then
  echo "Third argument to $0 must be a [@repo]//test/foo:bar label identifying a single test to run"
  echo "$3 does not mach this pattern. ie tools/bazel-test-gdb --package_path %workspace%:<path>/envoy //test/<some test>"
  exit 1
fi

SCRIPT_DIR="$(realpath "$(dirname "$0")")"
[[ -z "${BAZEL}" ]] && BAZEL=bazel
[[ -z "${GDB}" ]] && GDB=gdb

#nasty hack
[[ -z "${ENVOY_SRC}" ]] && ENVOY_SRC=/git/work/fdio/envoy

GDB_RUNNER=$(mktemp -t "bazel-test-gdb.XXXXXXX")
function cleanup() {
  #rm -f "${GDB_RUNNER}"
  echo "ERROR: ${GDB_RUNNER}"
}
trap cleanup EXIT

echo "first ${PWD}"
echo "envoy: ${ENVOY_SRC}"
cd "${ENVOY_SRC}"
echo "now: ${PWD}"

"${BAZEL}" test "$@" --strategy=TestRunner=standalone --cache_test_results=no \
		   --test_output=summary --run_under="${SCRIPT_DIR}/gen_gdb_wrapper_script.py ${ENVOY_SRC} ${GDB} ${GDB_RUNNER}"
chmod u+x "${GDB_RUNNER}"
"${GDB_RUNNER}"
